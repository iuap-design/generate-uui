+function($){

	//var Grid = function(element, options, viewModel,app) {
	var Grid = u.BaseAdapter.extend({
		initialize: function(element, options, viewModel) {
			// 初始options中包含grid的属性设置，还需要增加dataSource、columns、transMap以及事件处理
			var oThis = this;
			var compDiv = null;
			var comp = null;
			this.dataTable = $.getJSObject(viewModel, options["data"]);
			this.element = element;
			this.$element = $(element);
			this.editComponentDiv = {};
			this.editComponent = {};
			this.id = options['id'];
			this.gridOptions = options;
			
			// 在html中将函数类参数进行处理
			this.gridOptions.onBeforeRowSelected = $.getFunction(viewModel,this.gridOptions.onBeforeRowSelected);
			this.gridOptions.onRowSelected = $.getFunction(viewModel,this.gridOptions.onRowSelected);
			this.gridOptions.onBeforeRowUnSelected = $.getFunction(viewModel,this.gridOptions.onBeforeRowUnSelected);
			this.gridOptions.onRowUnSelected = $.getFunction(viewModel,this.gridOptions.onRowUnSelected);
			this.gridOptions.onBeforeAllRowSelected = $.getFunction(viewModel,this.gridOptions.onBeforeAllRowSelected);
			this.gridOptions.onAllRowSelected = $.getFunction(viewModel,this.gridOptions.onAllRowSelected);
			this.gridOptions.onBeforeAllRowUnSelected = $.getFunction(viewModel,this.gridOptions.onBeforeAllRowUnSelected);
			this.gridOptions.onAllRowUnSelected = $.getFunction(viewModel,this.gridOptions.onAllRowUnSelected);
			this.gridOptions.onBeforeRowFocus = $.getFunction(viewModel,this.gridOptions.onBeforeRowFocus);
			this.gridOptions.onRowFocus = $.getFunction(viewModel,this.gridOptions.onRowFocus);
			this.gridOptions.onBeforeRowUnFocus = $.getFunction(viewModel,this.gridOptions.onBeforeRowUnFocus);
			this.gridOptions.onRowUnFocus = $.getFunction(viewModel,this.gridOptions.onRowUnFocus);
			this.gridOptions.onDblClickFun = $.getFunction(viewModel,this.gridOptions.onDblClickFun);
			this.gridOptions.onValueChange = $.getFunction(viewModel,this.gridOptions.onValueChange);
	
			this.gridOptions.onBeforeRender = $.getFunction(viewModel,this.gridOptions.onBeforeRender);
			this.gridOptions.onRowHover = $.getFunction(viewModel,this.gridOptions.onRowHover);
			this.gridOptions.onRowUnHover = $.getFunction(viewModel,this.gridOptions.onRowUnHover);
	
			/*
			 * 处理column参数  item
			 * div子项div存储column信息
			 */
			var columns = [];
			$("div",this.$element).each(function() {
				var ops = $(this).attr('options')
				if(typeof(ops) == "undefined")
					var column = eval("(" + ops+")");
				else
					var column = JSON.parse(ops);
				// 处理精度，以dataTable的精度为准
				
				/*处理editType*/
				var eType = $.getFunction(viewModel, column.editType);
				var rType = $.getFunction(viewModel, column.renderType);
				var sumRenderType = $.getFunction(viewModel, column.sumRenderType);
				column.sumRenderType = sumRenderType;
				var eOptions;
				if(column.editOptions){
					if(typeof(column.editOptions) == "undefined")
						eOptions = eval("(" + column.editOptions +")");
					else
						eOptions = column.editOptions;
				} else {
					eOptions = column.editOptions = {};
				}
				eOptions.data = options['data']
				eOptions.field = column['field']
				// 默认按照string处理
				if(eType == '')
						eType = 'string';
				if(eType == 'string' || eType == 'integer' || eType == 'checkbox' || eType == 'combo' || eType == 'radio' || eType == 'float' || eType == 'currency' || eType == 'datetime'|| eType == 'date' || eType == 'time'){
					if(eType == 'string'){
						compDiv = $('<div><input type="text" class="u-grid-edit-item-string"></div>');
						if(!options.editType || options.editType =="default" ){
							compDiv.addClass("eType-input")
						}
						comp = new $.compManager.plugs.string(compDiv.find("input")[0],eOptions,viewModel);
	
					}else if(eType == 'integer'){
						compDiv = $('<div><input type="text" class="u-grid-edit-item-integer"></div>');
						if(!options.editType || options.editType =="default" ){
							compDiv.addClass("eType-input")
						}
						comp = new $.compManager.plugs.integer(compDiv.find("input")[0],eOptions,viewModel);
	
					} else if(eType == 'checkbox'){
						compDiv = $('<div><input id="' + oThis.id + "_edit_field_" + column['field'] + '" type="checkbox" class="u-grid-edit-item-checkbox"></div>');
						comp = new $.compManager.plugs.check(compDiv.find("input")[0],eOptions,viewModel);
	
					}else if(eType == 'combo'){
						compDiv = $('<div class="input-group  form_date u-grid-edit-item-comb"><div  type="text" class="form-control grid-combox"></div><i class="input-group-addon" ><i class="fa fa-angle-down"></i></i></div>');
						comp = new $.compManager.plugs.combo(compDiv[0],eOptions,viewModel);
	
					}else if(eType == 'radio'){
						if(!options.editType || options.editType =="default" ){
							compDiv = null;
							comp = null;
						}else {
							compDiv = $('<div class="u-grid-edit-item-radio"><input type="radio" name="identity" /><i data-role="name"></i></div>');
							comp = new $.compManager.plugs.radio(compDiv[0],eOptions,viewModel);
						}
					}else if(eType == 'float'){
						compDiv = $('<div><input type="text" class="u-grid-edit-item-float"></div>');
						if(!options.editType || options.editType =="default" ){
							compDiv.addClass("eType-input")
						}
						comp = new $.compManager.plugs.float(compDiv.find("input")[0],eOptions,viewModel);
					}else if(eType == 'currency'){
						compDiv = $('<div><input type="text" class="u-grid-edit-item-currency"></div>');
						if(!options.editType || options.editType =="default" ){
							compDiv.addClass("eType-input")
						}
						comp = new $.compManager.plugs.currency(compDiv.find("input")[0],eOptions,viewModel);
					}else if(eType == 'datetime'){
						compDiv = $('<div class="input-group u-grid-edit-item-datetime" ><input class="form-control" /><div class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></div></div>');
						
						comp = new $.compManager.plugs.datetime(compDiv[0],eOptions,viewModel);
					}else if(eType == 'date'){
						compDiv = $('<div class="input-group u-grid-edit-item-date" ><input class="form-control" /><div class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></div></div>');
						
						comp = new $.compManager.plugs.date(compDiv[0],eOptions,viewModel);
					}else if(eType == 'time'){
						compDiv = $('<div class="input-group u-grid-edit-item-date" ><input class="form-control" /><div class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></div></div>');
						
						comp = new $.compManager.plugs.time(compDiv[0],eOptions,viewModel);
					}
	
					oThis.editComponentDiv[column.field] = compDiv;
					oThis.editComponent[column.field] = comp;
					
					
					column.editType = function(obj){
						if(oThis.editComponentDiv[column.field][0].childNodes.length > 0){
						}else{
							//IE8有问题，所以需要重新创建div,将上面的代码直接拷贝
							if(eType == 'string'){
								compDiv = $('<div><input type="text" class="u-grid-edit-item-string"></div>');
								if(!options.editType || options.editType =="default" ){
									compDiv.addClass("eType-input")
								}
								comp = new $.compManager.plugs.string(compDiv.find("input")[0],eOptions,viewModel);
	
							}else if(eType == 'integer'){
								compDiv = $('<div><input type="text" class="u-grid-edit-item-integer"></div>');
								if(!options.editType || options.editType =="default" ){
									compDiv.addClass("eType-input")
								}
								comp = new $.compManager.plugs.integer(compDiv.find("input")[0],eOptions,viewModel);
	
							} else if(eType == 'checkbox'){
								compDiv = $('<div><input id="' + oThis.id + "_edit_field_" + column['field'] + '" type="checkbox" class="u-grid-edit-item-checkbox"></div>');
								comp = new $.compManager.plugs.check(compDiv.find("input")[0],eOptions,viewModel);
	
							}else if(eType == 'combo'){
								compDiv = $('<div class="input-group  form_date u-grid-edit-item-comb"><div  type="text" class="form-control grid-combox"></div><i class="input-group-addon" ><i class="fa fa-angle-down"></i></i></div>');
								comp = new $.compManager.plugs.combo(compDiv[0],eOptions,viewModel);
	
							}else if(eType == 'radio'){
								if(!options.editType || options.editType =="default" ){
									compDiv = null;
									comp = null;
								}else {
									compDiv = $('<div class="u-grid-edit-item-radio"><input type="radio" name="identity" /><i data-role="name"></i></div>');
									comp = new $.compManager.plugs.radio(compDiv[0],eOptions,viewModel);
								}
							}else if(eType == 'float'){
								compDiv = $('<div><input type="text" class="u-grid-edit-item-float"></div>');
								if(!options.editType || options.editType =="default" ){
									compDiv.addClass("eType-input")
								}
								comp = new $.compManager.plugs.float(compDiv.find("input")[0],eOptions,viewModel);
							}else if(eType == 'currency'){
								compDiv = $('<div><input type="text" class="u-grid-edit-item-currency"></div>');
								if(!options.editType || options.editType =="default" ){
									compDiv.addClass("eType-input")
								}
								comp = new $.compManager.plugs.currency(compDiv.find("input")[0],eOptions,viewModel);
							}else if(eType == 'datetime'){
								compDiv = $('<div class="input-group u-grid-edit-item-datetime" ><input class="form-control" /><div class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></div></div>');
								eOptions.widgetParent = $("body")
								comp = new $.compManager.plugs.datetime(compDiv[0],eOptions,viewModel);
							}else if(eType == 'date'){
								compDiv = $('<div class="input-group u-grid-edit-item-date" ><input class="form-control" /><div class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></div></div>');
								eOptions.widgetParent = $("body")
								comp = new $.compManager.plugs.date(compDiv[0],eOptions,viewModel);
							}else if(eType == 'time'){
								compDiv = $('<div class="input-group u-grid-edit-item-date" ><input class="form-control" /><div class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></div></div>');
								eOptions.widgetParent = $("body")
								comp = new $.compManager.plugs.time(compDiv[0],eOptions,viewModel);
							}
	
							oThis.editComponentDiv[column.field] = compDiv;
							oThis.editComponent[column.field] = comp;
						}
	
						var comp = oThis.editComponent[column.field]
						if (!comp)
							return
						obj.element.innerHTML = '';
						var $Div = $('<div class="u-grid-content-td-div" style="margin:0px;"></div>');
						var row = oThis.getDataTableRow(obj.rowObj)
						$(obj.element).append($Div);
						$Div.append(oThis.editComponentDiv[column.field]);
						if(comp.required) {
							$(obj.element).parent().find('.u-grid-edit-mustFlag').show()
						}
	
						// checkbox 类型
						if($Div.find('.checkbox').length > 0) {
							$Div.closest('.u-grid-edit-div').css({'position': 'absolute', 'left': '83px'});
							$Div.closest('.u-grid-edit-whole-div').find('.u-grid-edit-label').css({'margin-left': '124px', 'text-align': 'left'})
						}
						comp.modelValueChange(obj.value);
					}
				}else if (typeof eType == 'function'){
					column.editType = eType;
				}
				
				if(rType == 'booleanRender'){
					column.renderType = function(obj){
						var checkStr = '';
						if(obj.value == 'Y'){
							checkStr = 'checked';
						}
						var htmlStr = '<input type="checkbox"   style="cursor:default;" disabled ' + checkStr +'>'
						obj.element.innerHTML = htmlStr;
					}
				}else if(rType == 'integerRender'){
					column.renderType = function(obj){
						obj.element.innerHTML =  obj.value
						$(obj.element).css('text-align', 'right')	
					}
				}else if(rType == 'currencyRender'){
					column.renderType = function(obj){
						//需要处理精度
						
						var grid = obj.gridObj											
						var column = obj.gridCompColumn
						var field = column.options.field
						var rowIndex = obj.rowIndex
						var datatable = grid.dataTable
						var rowId =  $(grid.dataSourceObj.rows[rowIndex].value).attr("$_#_@_id");
						var row = datatable.getRowByRowId(rowId);				
						
						var rprec = row.getMeta(field, 'precision')
						var maskerMeta = iweb.Core.getMaskerMeta('float') || {}
						var precision = typeof(parseFloat(rprec)) == 'number' ? rprec : maskerMeta.precision;
						maskerMeta.precision = precision;
	
						maskerMeta.precision = precision || maskerMeta.precision
						var formater = new $.NumberFormater(maskerMeta.precision);
						var masker = new NumberMasker(maskerMeta);
						var svalue = masker.format(formater.format(obj.value)).value
						obj.element.innerHTML =  svalue
						$(obj.element).css('text-align', 'right')
						$(obj.element).attr('title', svalue)
					}
				}else if(rType == 'floatRender'){
					column.renderType = function(obj){
						//需要处理精度
						
						var grid = obj.gridObj											
						var column = obj.gridCompColumn
						var field = column.options.field
						var rowIndex = obj.rowIndex
						var datatable = grid.dataTable
						var rowId =  $(grid.dataSourceObj.rows[rowIndex].value).attr("$_#_@_id");
						var row = datatable.getRowByRowId(rowId);				
						
						var rprec = row.getMeta(field, 'precision')
						var maskerMeta = iweb.Core.getMaskerMeta('float') || {}
						var precision = typeof(parseFloat(rprec)) == 'number' ? rprec : maskerMeta.precision;
						maskerMeta.precision = precision;
	
						var formater = new $.NumberFormater(maskerMeta.precision);
						var masker = new NumberMasker(maskerMeta);
						var svalue = masker.format(formater.format(obj.value)).value
						obj.element.innerHTML =  svalue
						$(obj.element).css('text-align', 'right')
						$(obj.element).attr('title', svalue)
					}
				}else if(rType == 'comboRender'){
					column.renderType = function(obj){
					  
					  //需要将key转化为name
						var ds = $.getJSObject(viewModel, eOptions['datasource'])
					
						obj.element.innerHTML = '';
						if(nameArr){
							nameArr.length = 0
						}
						
						var valArr = obj.value.split(',')
						var nameArr = []
						for( var i=0,length=ds.length; i<length; i++){
	                      for(var j=0; j<valArr.length;j++){
	                      	  if(ds[i].pk == valArr[j]){
	                      	  	  nameArr.push(ds[i].name)
	                      	  }
	                      }
						}	
						var svalue = nameArr.toString()
						obj.element.innerHTML = svalue;
						$(obj.element).attr('title', svalue)
					  				  
					}
				}else if(rType == 'dateRender'){
					//通过grid的dataType为Date format处理
					column.renderType = function(obj){
					var svalue =  moment(obj.value).format('YYYY-M-D ') //$.dateRender(obj.value)
					obj.element.innerHTML = svalue;
					$(obj.element).attr('title', svalue)
					}
				}else if(rType == 'dateTimeRender'){
					//通过grid的dataType为DateTime format处理
					column.renderType = function(obj){
					var svalue = moment(obj.value).format('YYYY-M-D HH:mm'); //$.dateTimeRender(obj.value)
					obj.element.innerHTML = svalue;
					$(obj.element).attr('title', svalue)
					}
				}else if (typeof rType == 'function'){
					column.renderType =  rType
				}else if(rType == 'radioRender'){
					column.renderType = function(params){
						//debugger
						var ds = $.getJSObject(viewModel, eOptions['datasource'])
						var value = params.value
						var compDiv = $('<div class="u-grid-edit-item-radio"></div>');
						
						params.element.innerHTML = ""
						$(params.element).append(compDiv)
	
						for(var i = 0;i < ds.length;i++){
							if(ds[i].pk==value)
								compDiv.append('<input name="'+column.field+params.row.value['$_#_@_id']+'" type="radio" value="'+ds[i].pk +'" checked="true" /><i data-role="name">' +ds[i].name+ '</i>')
							else
								compDiv.append('<input name="'+column.field+params.row.value['$_#_@_id']+'" type="radio" value="'+ds[i].pk +'"/><i data-role="name">' +ds[i].name+ '</i>')
						}
						compDiv.find(":radio").each(function() {
	
							$(this).on('click', function() {
	
								var val = this.value
								compDiv.find(":radio").each(function() {
									if (this.value == val) {
										this.checked = true;
									}else{
										this.checked = false;
									}
								})
								var grid = params.gridObj
								var column = params.gridCompColumn
								var field = column.options.field
								var datatable = grid.dataTable
								//var rowIndex = params.rowIndex
								//var tmprowId =  $(grid.dataSourceObj.rows[rowIndex].value).attr("$_#_@_id");
								var rowId = params.row.value['$_#_@_id'];
	
								var row = datatable.getRowByRowId(rowId);
	
								row.setValue(field,val)
							})
						})
	//					var comp = new $.compManager.plugs.radio(compDiv[0],eOptions,viewModel);					
	//					for( var i=0,length=rdo.length; i<length; i++){
	//					   if(rdo[i].pk==value){
	//					   	 obj.element.innerHTML = '<input type="radio" checked><i data-role="name">'+rdo[i].name+'</i>';
	//					   	 break;
	//					   }
	//					}				
						
					}
				}
				columns.push(column);	
			});
			
			if (app && app.adjustFunc)
				app.adjustFunc.call(app, {id: this.id, type:'gridColumn', columns:columns});
	
			this.gridOptions.columns = columns;
			
			
			/*
			 * 处理viewModel与grid之间的绑定
			 * 
			 */
			var onRowSelectedFun = this.gridOptions.onRowSelected; 
			// 选中
			this.gridOptions.onRowSelected = function(obj) {
				var rowId = oThis.grid.dataSourceObj.rows[obj.rowIndex].value['$_#_@_id'];
				var index = oThis.dataTable.getIndexByRowId(rowId);
				if(oThis.grid.options.multiSelect){
					oThis.dataTable.addRowsSelect([index]);
				}else{
					oThis.dataTable.setRowSelect(index);
				}
				
				if(onRowSelectedFun){
					onRowSelectedFun.call(oThis,obj);
				}
			};
			this.dataTable.on($.DataTable.ON_ROW_SELECT, function(event) {
				/*index转化为grid的index*/
				$.each(event.rowIds, function() {
					var index = oThis.grid.getRowIndexByValue('$_#_@_id',this);
					var selectFlag = true;
					if(index > -1){
						selectFlag = oThis.grid.setRowSelect(parseInt(index));
						if(!selectFlag){
							oThis.dataTable.setRowUnSelect(oThis.dataTable.getIndexByRowId(this));
						}
					}
				});
			});
			
			//全选
			this.dataTable.on($.DataTable.ON_ROW_ALLSELECT, function(event) {
				oThis.grid.setAllRowSelect()
			});
			
			//全返选
			this.dataTable.on($.DataTable.ON_ROW_ALLUNSELECT, function(event) {
				oThis.grid.setAllRowUnSelect()
			});
			
			// 反选
			var onRowUnSelectedFun = this.gridOptions.onRowUnSelected; 
			this.gridOptions.onRowUnSelected = function(obj) {
				var rowId = oThis.grid.dataSourceObj.rows[obj.rowIndex].value['$_#_@_id'];
				var index = oThis.dataTable.getIndexByRowId(rowId);
				oThis.dataTable.setRowUnSelect(index);
				if(onRowUnSelectedFun){
					onRowUnSelectedFun.call(oThis,obj);
				}
			};
			this.dataTable.on($.DataTable.ON_ROW_UNSELECT, function(event) {
				$.each(event.rowIds, function() {
					var index = oThis.grid.getRowIndexByValue('$_#_@_id',this);
					var unSelectFlag = true;
					if(index > -1){
						unSelectFlag = oThis.grid.setRowUnselect(parseInt(index));
						if(!unSelectFlag){
							if(oThis.grid.options.multiSelect){
								oThis.dataTable.addRowsSelect([oThis.dataTable.getIndexByRowId(this)]);
							}else{
								oThis.dataTable.setRowSelect(oThis.dataTable.getIndexByRowId(this));
							}
						}
					}
				});
			});
			
			var onRowFocusFun = this.gridOptions.onRowFocus; 
			// focus
			this.gridOptions.onRowFocus = function(obj) {
				var rowId = oThis.grid.dataSourceObj.rows[obj.rowIndex].value['$_#_@_id'];
				var index = oThis.dataTable.getIndexByRowId(rowId);
				
				if(oThis.grid.options.rowClickBan) {
					oThis.dataTable.setRowFocus(index, true);
				} else {
					oThis.dataTable.setRowFocus(index);
				}
				
				if(onRowFocusFun){
					onRowFocusFun.call(oThis,obj);
				}
			};
			this.dataTable.on($.DataTable.ON_ROW_FOCUS, function(event) {
				/*index转化为grid的index*/
				var index = oThis.grid.getRowIndexByValue('$_#_@_id',event.rowId);
			
				var focusFlag = true;
				if(index > -1){
					focusFlag = oThis.grid.setRowFocus(parseInt(index));
					
					if(!focusFlag){
						oThis.dataTable.setRowUnFocus(oThis.dataTable.getIndexByRowId(event.rowId));
					}
				}
			});
			
			// 反focus
			var onRowUnFocusFun = this.gridOptions.onRowUnFocus; 
			this.gridOptions.onRowUnFocus = function(obj) {
				var rowId = oThis.grid.dataSourceObj.rows[obj.rowIndex].value['$_#_@_id'];
				var index = oThis.dataTable.getIndexByRowId(rowId);
				oThis.dataTable.setRowUnFocus(index);
				if(onRowUnFocusFun){
					onRowUnFocusFun.call(oThis,obj);
				}
			};
			this.dataTable.on($.DataTable.ON_ROW_UNFOCUS, function(event) {
				var index = oThis.grid.getRowIndexByValue('$_#_@_id',event.rowId);
				var unFocusFlag = true;
				if(index > -1){
					unFocusFlag = oThis.grid.setRowUnFocus(parseInt(index));
					if(!unFocusFlag){
						oThis.dataTable.setRowFocus(oThis.dataTable.getIndexByRowId(event.rowId));
					}
				}
			});
			
			// 增行,只考虑viewModel传入grid
	//		var onRowInsertFun = this.gridOptions.onRowInsert; 
	//		this.gridOptions.onRowInsert = function(obj){
	//			dataTable.insertRow(obj.index,obj.row);
	//			if(onRowSelectedFun){
	//				viewModel[onRowUnSelectedFun].call(grid,grid, row, rowindex);
	//			}
	//		};
			this.dataTable.on($.DataTable.ON_INSERT, function(event) {
				var gridRows = new Array();
				$.each(event.rows,function(){
					var row = this.data;
					var id = this.rowId;
					var gridRow = {};
					for(var filed in row){
						gridRow[filed] = row[filed].value;
					}
					gridRow['$_#_@_id'] = id;
					gridRows.push(gridRow); 
				})
				oThis.grid.addRows(gridRows,event.index);
			});
			
			this.dataTable.on($.DataTable.ON_UPDATE, function(event) {
				$.each(event.rows,function(){
					var row = this.data;
					var id = this.rowId;
					var gridRow = {};
					for(var filed in row){
						gridRow[filed] = row[filed].value;
					}
					gridRow['$_#_@_id'] = id;
					var index = oThis.grid.getRowIndexByValue('$_#_@_id',id);
					oThis.grid.updateRow(index,gridRow);
				})
				
			});		
			
			this.dataTable.on($.DataTable.ON_VALUE_CHANGE, function(obj) {
		
				var id = obj.rowId;
				var index = oThis.grid.getRowIndexByValue('$_#_@_id',id);
				if(index == -1) {
					return;
				}
				var field = obj.field;
				var value = obj.newValue;
				oThis.grid.updateValueAt(index,field,value);
				
			});		
			
			// 删除行,只考虑viewModel传入grid
	//		this.gridOptions.onRowDelete = function(obj){
	//			dataTable.removeRow(obj.index);
	//		};
			this.dataTable.on($.DataTable.ON_DELETE, function(event) {
				/*index转化为grid的index*/
				var gridIndexs = new Array();
				$.each(event.rowIds, function() {
					var index = oThis.grid.getRowIndexByValue('$_#_@_id',this);
					gridIndexs.push(index);
				});
				oThis.grid.deleteRows(gridIndexs);
			});
			
			this.dataTable.on($.DataTable.ON_DELETE_ALL, function(event) {
				oThis.grid.setDataSource({})
			});		
			
			// 数据改变
			var onValueChangeFun = this.gridOptions.onValueChange; 
			this.gridOptions.onValueChange = function(obj) {
				var row = oThis.getDataTableRow(oThis.grid.dataSourceObj.rows[obj.rowIndex].value)
				if(row){
					if($.type(obj.newValue) == 'object') {
						row.setValue(obj.field, obj.newValue.trueValue);
						row.setMeta(obj.field, 'display', obj.newValue.showValue);
					} else {
						row.setValue(obj.field,obj.newValue);
					}
				}
				if(onValueChangeFun){
					onValueChangeFun.call(oThis,obj);
				}
			};
			this.dataTable.on('valueChange', function(event) {
				var field = event.field,
					rowId = event.rowId,
					oldValue = event.oldValue,
					newValue = event.newValue;
				var rowIndex = oThis.grid.getRowIndexByValue('$_#_@_id',rowId);
				if(rowIndex > -1){
					oThis.grid.updateValueAt(rowIndex,field,newValue);	
				}
			});
			// 加载数据,只考虑viewModel传入grid
			this.dataTable.on($.DataTable.ON_LOAD, function(data) {
				if(data.length > 0){
					var values = new Array();
					
					$.each(data, function() {
						var value = {};
						var dataObj = this.data;
						var id = this.rowId;
						for(var p in dataObj){
							var v = dataObj[p].value;
							value[p] = v;
						} 
						value['$_#_@_id'] = id;
						values.push(value);
					});
					var dataSource = {};
					dataSource['values'] = values;
					oThis.grid.setDataSource(dataSource);
				}
			});
			this.dataTable.on($.DataTable.ON_ENABLE_CHANGE, function(enable) {		
				oThis.grid.setEditable(enable.enable);
			});
	
			this.dataTable.on($.DataTable.ON_ROW_META_CHANGE, function(event){
				var field = event.field,
					meta = event.meta,
					row = event.row,
					newValue = event.newValue
				if (meta == 'required'){
					oThis.grid.setRequired(field, newValue)
				}
				if (meta == 'precision'){
					var comp = oThis.editComponent[field];
					if(comp) {
						comp.setPrecision(newValue)
					}
	
					var index = oThis.grid.getRowIndexByValue('$_#_@_id',row.rowId);
					if(index == -1) {
						return;
					}
					var value = row.getValue(field)
	
					oThis.grid.updateValueAt(index,field,value,true);
				}
			})
	
			this.dataTable.on($.DataTable.ON_META_CHANGE, function(event){
				var field = event.field
				var meta = event.meta
				if (meta == 'precision'){
					oThis.grid.renderTypeFun({field:field})
				}
			})
	
			var onRowHoverFun = this.gridOptions.onRowHover; 
			// hover
			this.gridOptions.onRowHover = function(obj) {
				var rowId = oThis.grid.dataSourceObj.rows[obj.rowIndex].value['$_#_@_id'];
				var index = oThis.dataTable.getIndexByRowId(rowId);
				
				oThis.dataTable.setRowHover(index);
				
				if(onRowHoverFun){
					onRowHoverFun.call(oThis,obj);
				}
			};
	
			var onRowUnHoverFun = this.gridOptions.onRowUnHover; 
			this.gridOptions.onRowUnHover = function(obj) {
				var rowId = oThis.grid.dataSourceObj.rows[obj.rowIndex].value['$_#_@_id'];
				var index = oThis.dataTable.getIndexByRowId(rowId);
				
				oThis.dataTable.setRowUnHover();
				
				if(onRowUnHoverFun){
					onRowUnHoverFun.call(oThis,obj);
				}
			};
	
	
			// 创建grid
			this.grid = $(element).grid(this.gridOptions);
			this.grid.dataTable = this.dataTable
			this.grid.viewModel = viewModel
			this.grid.gridModel = this
			
			
			
			//如果先插入数据再创建grid需要处理 load
			var data = this.dataTable.rows(); 
			if(data.length > 0){
				var values = new Array();
					
				$.each(data, function() {
					var value = {};
					var dataObj = this.data;
					var id = this.rowId;
					for(var p in dataObj){
						var v = dataObj[p].value;
						value[p] = v;
					} 
					value['$_#_@_id'] = id;
					values.push(value);
				});
				var dataSource = {};
				dataSource['values'] = values;
				oThis.grid.setDataSource(dataSource);
			}
			// 选中行
			var selectIndexs = this.dataTable.getSelectedIndexs();
			if(selectIndexs.length > 0){
				$.each(selectIndexs, function() {
					oThis.grid.setRowSelect(this);	
				});
			}
			
			return this;
		},
	
	getDataTableRow :function(gridRow){
		var rowId =  gridRow['$_#_@_id']
		var row = null
		var rowIndex = this.dataTable.getIndexByRowId(rowId)
		if(rowIndex > -1)
			row = this.dataTable.getRow(rowIndex);
		return row
	},
	
	setEnable : function(enable){
		this.grid.setEditable(enable);
	},
	
	setShowHeader : function(showHeader){
		this.grid.setShowHeader(showHeader);
	},
	
	// 传入要编辑的tr对应的jquery对象
	editRowFun : function(index){
		this.dataTable.setRowSelect(index);
		this.grid.editRowIndexFun(index);
	},
	Statics: {
			compName: 'grid'
		}
	});

	if ($.compManager)
		$.compManager.addPlug(Grid)

}($);
